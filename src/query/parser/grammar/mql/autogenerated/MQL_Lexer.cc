
// Generated from MQL_Lexer.g4 by ANTLR 4.13.1


#include "MQL_Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MQL_LexerStaticData final {
  MQL_LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MQL_LexerStaticData(const MQL_LexerStaticData&) = delete;
  MQL_LexerStaticData(MQL_LexerStaticData&&) = delete;
  MQL_LexerStaticData& operator=(const MQL_LexerStaticData&) = delete;
  MQL_LexerStaticData& operator=(MQL_LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mql_lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MQL_LexerStaticData *mql_lexerLexerStaticData = nullptr;

void mql_lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mql_lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mql_lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MQL_LexerStaticData>(
    std::vector<std::string>{
      "K_ACYCLIC", "K_AND", "K_ANGULAR", "K_ANY", "K_AVG", "K_ALL", "K_ASC", 
      "K_BY", "K_BOOL", "K_COUNT", "K_DESCRIBE", "K_DESC", "K_DISTINCT", 
      "K_EDGE", "K_EUCLIDEAN", "K_INCOMING", "K_INSERT", "K_INTEGER", "K_IS", 
      "K_FALSE", "K_FLOAT", "K_GROUP", "K_LABELS", "K_LABEL", "K_LIMIT", 
      "K_MANHATTAN", "K_MATCH", "K_MAX", "K_MIN", "K_OPTIONAL", "K_ORDER", 
      "K_OR", "K_OUTGOING", "K_PROJECT_SIMILARITY", "K_PROPERTIES", "K_PROPERTY", 
      "K_NOT", "K_NULL", "K_SHORTEST", "K_SIMPLE", "K_RETURN", "K_SET", 
      "K_SIMILARITY_SEARCH", "K_SUM", "K_STRING", "K_TRUE", "K_TRAILS", 
      "K_WALKS", "K_WHERE", "TRUE_PROP", "FALSE_PROP", "ANON_ID", "EDGE_ID", 
      "KEY", "TYPE", "TYPE_VAR", "VARIABLE", "STRING", "UNSIGNED_INTEGER", 
      "UNSIGNED_FLOAT", "UNSIGNED_SCIENTIFIC_NOTATION", "NAME", "LEQ", "GEQ", 
      "EQ", "NEQ", "LT", "GT", "SINGLE_EQ", "PATH_SEQUENCE", "PATH_ALTERNATIVE", 
      "PATH_NEGATION", "STAR", "PERCENT", "QUESTION_MARK", "PLUS", "MINUS", 
      "L_PAR", "R_PAR", "LCURLY_BRACKET", "RCURLY_BRACKET", "LSQUARE_BRACKET", 
      "RSQUARE_BRACKET", "COMMA", "COLON", "WHITE_SPACE", "SINGLE_LINE_COMMENT", 
      "UNRECOGNIZED", "DIGIT", "EXPONENT", "A", "B", "C", "D", "E", "F", 
      "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", 
      "U", "V", "W", "X", "Y", "Z"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "'false'", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'true'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'<='", 
      "'>='", "'=='", "'!='", "'<'", "'>'", "'='", "'/'", "'|'", "'^'", 
      "'*'", "'%'", "'\\u003F'", "'+'", "'-'", "'('", "')'", "'{'", "'}'", 
      "'['", "']'", "','", "':'"
    },
    std::vector<std::string>{
      "", "K_ACYCLIC", "K_AND", "K_ANGULAR", "K_ANY", "K_AVG", "K_ALL", 
      "K_ASC", "K_BY", "K_BOOL", "K_COUNT", "K_DESCRIBE", "K_DESC", "K_DISTINCT", 
      "K_EDGE", "K_EUCLIDEAN", "K_INCOMING", "K_INSERT", "K_INTEGER", "K_IS", 
      "K_FALSE", "K_FLOAT", "K_GROUP", "K_LABELS", "K_LABEL", "K_LIMIT", 
      "K_MANHATTAN", "K_MATCH", "K_MAX", "K_MIN", "K_OPTIONAL", "K_ORDER", 
      "K_OR", "K_OUTGOING", "K_PROJECT_SIMILARITY", "K_PROPERTIES", "K_PROPERTY", 
      "K_NOT", "K_NULL", "K_SHORTEST", "K_SIMPLE", "K_RETURN", "K_SET", 
      "K_SIMILARITY_SEARCH", "K_SUM", "K_STRING", "K_TRUE", "K_TRAILS", 
      "K_WALKS", "K_WHERE", "TRUE_PROP", "FALSE_PROP", "ANON_ID", "EDGE_ID", 
      "KEY", "TYPE", "TYPE_VAR", "VARIABLE", "STRING", "UNSIGNED_INTEGER", 
      "UNSIGNED_FLOAT", "UNSIGNED_SCIENTIFIC_NOTATION", "NAME", "LEQ", "GEQ", 
      "EQ", "NEQ", "LT", "GT", "SINGLE_EQ", "PATH_SEQUENCE", "PATH_ALTERNATIVE", 
      "PATH_NEGATION", "STAR", "PERCENT", "QUESTION_MARK", "PLUS", "MINUS", 
      "L_PAR", "R_PAR", "LCURLY_BRACKET", "RCURLY_BRACKET", "LSQUARE_BRACKET", 
      "RSQUARE_BRACKET", "COMMA", "COLON", "WHITE_SPACE", "SINGLE_LINE_COMMENT", 
      "UNRECOGNIZED"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,88,844,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,1,0,
  	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
  	1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
  	1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
  	1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
  	1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
  	1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
  	1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
  	1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
  	1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
  	1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,
  	1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,
  	1,51,1,51,5,51,583,8,51,10,51,12,51,586,9,51,1,52,1,52,1,52,1,52,1,52,
  	5,52,593,8,52,10,52,12,52,596,9,52,1,53,1,53,1,53,5,53,601,8,53,10,53,
  	12,53,604,9,53,1,54,1,54,1,54,5,54,609,8,54,10,54,12,54,612,9,54,1,55,
  	1,55,1,55,1,55,5,55,618,8,55,10,55,12,55,621,9,55,1,56,1,56,1,56,5,56,
  	626,8,56,10,56,12,56,629,9,56,1,57,1,57,1,57,1,57,5,57,635,8,57,10,57,
  	12,57,638,9,57,1,57,1,57,1,58,4,58,643,8,58,11,58,12,58,644,1,59,4,59,
  	648,8,59,11,59,12,59,649,1,59,1,59,5,59,654,8,59,10,59,12,59,657,9,59,
  	1,59,1,59,4,59,661,8,59,11,59,12,59,662,3,59,665,8,59,1,60,4,60,668,8,
  	60,11,60,12,60,669,1,60,1,60,5,60,674,8,60,10,60,12,60,677,9,60,1,60,
  	1,60,1,60,1,60,4,60,683,8,60,11,60,12,60,684,1,60,1,60,1,60,4,60,690,
  	8,60,11,60,12,60,691,1,60,1,60,3,60,696,8,60,1,61,1,61,5,61,700,8,61,
  	10,61,12,61,703,9,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,
  	1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,
  	1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,
  	1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,4,85,
  	756,8,85,11,85,12,85,757,1,85,1,85,1,86,1,86,1,86,1,86,5,86,766,8,86,
  	10,86,12,86,769,9,86,1,86,3,86,772,8,86,1,86,1,86,3,86,776,8,86,1,86,
  	1,86,1,87,1,87,1,88,1,88,1,89,1,89,3,89,786,8,89,1,89,4,89,789,8,89,11,
  	89,12,89,790,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,
  	95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,
  	102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,
  	1,108,1,108,1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,1,113,1,113,
  	1,114,1,114,1,115,1,115,0,0,116,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
  	9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
  	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
  	44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
  	55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,
  	65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,
  	75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,
  	85,171,86,173,87,175,88,177,0,179,0,181,0,183,0,185,0,187,0,189,0,191,
  	0,193,0,195,0,197,0,199,0,201,0,203,0,205,0,207,0,209,0,211,0,213,0,215,
  	0,217,0,219,0,221,0,223,0,225,0,227,0,229,0,231,0,1,0,34,1,0,49,57,1,
  	0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,3,0,9,
  	10,13,13,32,32,2,0,10,10,13,13,2,0,69,69,101,101,2,0,43,43,45,45,2,0,
  	65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,70,
  	70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,
  	74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,
  	0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,
  	2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,
  	2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,
  	2,0,90,90,122,122,841,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
  	0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
  	1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
  	0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
  	0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
  	1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
  	0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
  	0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
  	1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
  	0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
  	0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,
  	0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,
  	0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,
  	0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,
  	0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,
  	0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,
  	0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,
  	0,0,175,1,0,0,0,1,233,1,0,0,0,3,241,1,0,0,0,5,245,1,0,0,0,7,253,1,0,0,
  	0,9,257,1,0,0,0,11,261,1,0,0,0,13,265,1,0,0,0,15,269,1,0,0,0,17,272,1,
  	0,0,0,19,277,1,0,0,0,21,283,1,0,0,0,23,292,1,0,0,0,25,297,1,0,0,0,27,
  	306,1,0,0,0,29,311,1,0,0,0,31,321,1,0,0,0,33,330,1,0,0,0,35,337,1,0,0,
  	0,37,345,1,0,0,0,39,348,1,0,0,0,41,354,1,0,0,0,43,360,1,0,0,0,45,366,
  	1,0,0,0,47,373,1,0,0,0,49,379,1,0,0,0,51,385,1,0,0,0,53,395,1,0,0,0,55,
  	401,1,0,0,0,57,405,1,0,0,0,59,409,1,0,0,0,61,418,1,0,0,0,63,424,1,0,0,
  	0,65,427,1,0,0,0,67,436,1,0,0,0,69,455,1,0,0,0,71,466,1,0,0,0,73,475,
  	1,0,0,0,75,479,1,0,0,0,77,484,1,0,0,0,79,493,1,0,0,0,81,500,1,0,0,0,83,
  	507,1,0,0,0,85,511,1,0,0,0,87,529,1,0,0,0,89,533,1,0,0,0,91,540,1,0,0,
  	0,93,545,1,0,0,0,95,552,1,0,0,0,97,558,1,0,0,0,99,564,1,0,0,0,101,570,
  	1,0,0,0,103,577,1,0,0,0,105,587,1,0,0,0,107,597,1,0,0,0,109,605,1,0,0,
  	0,111,613,1,0,0,0,113,622,1,0,0,0,115,630,1,0,0,0,117,642,1,0,0,0,119,
  	664,1,0,0,0,121,695,1,0,0,0,123,697,1,0,0,0,125,704,1,0,0,0,127,707,1,
  	0,0,0,129,710,1,0,0,0,131,713,1,0,0,0,133,716,1,0,0,0,135,718,1,0,0,0,
  	137,720,1,0,0,0,139,722,1,0,0,0,141,724,1,0,0,0,143,726,1,0,0,0,145,728,
  	1,0,0,0,147,730,1,0,0,0,149,732,1,0,0,0,151,734,1,0,0,0,153,736,1,0,0,
  	0,155,738,1,0,0,0,157,740,1,0,0,0,159,742,1,0,0,0,161,744,1,0,0,0,163,
  	746,1,0,0,0,165,748,1,0,0,0,167,750,1,0,0,0,169,752,1,0,0,0,171,755,1,
  	0,0,0,173,761,1,0,0,0,175,779,1,0,0,0,177,781,1,0,0,0,179,783,1,0,0,0,
  	181,792,1,0,0,0,183,794,1,0,0,0,185,796,1,0,0,0,187,798,1,0,0,0,189,800,
  	1,0,0,0,191,802,1,0,0,0,193,804,1,0,0,0,195,806,1,0,0,0,197,808,1,0,0,
  	0,199,810,1,0,0,0,201,812,1,0,0,0,203,814,1,0,0,0,205,816,1,0,0,0,207,
  	818,1,0,0,0,209,820,1,0,0,0,211,822,1,0,0,0,213,824,1,0,0,0,215,826,1,
  	0,0,0,217,828,1,0,0,0,219,830,1,0,0,0,221,832,1,0,0,0,223,834,1,0,0,0,
  	225,836,1,0,0,0,227,838,1,0,0,0,229,840,1,0,0,0,231,842,1,0,0,0,233,234,
  	3,181,90,0,234,235,3,185,92,0,235,236,3,229,114,0,236,237,3,185,92,0,
  	237,238,3,203,101,0,238,239,3,197,98,0,239,240,3,185,92,0,240,2,1,0,0,
  	0,241,242,3,181,90,0,242,243,3,207,103,0,243,244,3,187,93,0,244,4,1,0,
  	0,0,245,246,3,181,90,0,246,247,3,207,103,0,247,248,3,193,96,0,248,249,
  	3,221,110,0,249,250,3,203,101,0,250,251,3,181,90,0,251,252,3,215,107,
  	0,252,6,1,0,0,0,253,254,3,181,90,0,254,255,3,207,103,0,255,256,3,229,
  	114,0,256,8,1,0,0,0,257,258,3,181,90,0,258,259,3,223,111,0,259,260,3,
  	193,96,0,260,10,1,0,0,0,261,262,3,181,90,0,262,263,3,203,101,0,263,264,
  	3,203,101,0,264,12,1,0,0,0,265,266,3,181,90,0,266,267,3,217,108,0,267,
  	268,3,185,92,0,268,14,1,0,0,0,269,270,3,183,91,0,270,271,3,229,114,0,
  	271,16,1,0,0,0,272,273,3,183,91,0,273,274,3,209,104,0,274,275,3,209,104,
  	0,275,276,3,203,101,0,276,18,1,0,0,0,277,278,3,185,92,0,278,279,3,209,
  	104,0,279,280,3,221,110,0,280,281,3,207,103,0,281,282,3,219,109,0,282,
  	20,1,0,0,0,283,284,3,187,93,0,284,285,3,189,94,0,285,286,3,217,108,0,
  	286,287,3,185,92,0,287,288,3,215,107,0,288,289,3,197,98,0,289,290,3,183,
  	91,0,290,291,3,189,94,0,291,22,1,0,0,0,292,293,3,187,93,0,293,294,3,189,
  	94,0,294,295,3,217,108,0,295,296,3,185,92,0,296,24,1,0,0,0,297,298,3,
  	187,93,0,298,299,3,197,98,0,299,300,3,217,108,0,300,301,3,219,109,0,301,
  	302,3,197,98,0,302,303,3,207,103,0,303,304,3,185,92,0,304,305,3,219,109,
  	0,305,26,1,0,0,0,306,307,3,189,94,0,307,308,3,187,93,0,308,309,3,193,
  	96,0,309,310,3,189,94,0,310,28,1,0,0,0,311,312,3,189,94,0,312,313,3,221,
  	110,0,313,314,3,185,92,0,314,315,3,203,101,0,315,316,3,197,98,0,316,317,
  	3,187,93,0,317,318,3,189,94,0,318,319,3,181,90,0,319,320,3,207,103,0,
  	320,30,1,0,0,0,321,322,3,197,98,0,322,323,3,207,103,0,323,324,3,185,92,
  	0,324,325,3,209,104,0,325,326,3,205,102,0,326,327,3,197,98,0,327,328,
  	3,207,103,0,328,329,3,193,96,0,329,32,1,0,0,0,330,331,3,197,98,0,331,
  	332,3,207,103,0,332,333,3,217,108,0,333,334,3,189,94,0,334,335,3,215,
  	107,0,335,336,3,219,109,0,336,34,1,0,0,0,337,338,3,197,98,0,338,339,3,
  	207,103,0,339,340,3,219,109,0,340,341,3,189,94,0,341,342,3,193,96,0,342,
  	343,3,189,94,0,343,344,3,215,107,0,344,36,1,0,0,0,345,346,3,197,98,0,
  	346,347,3,217,108,0,347,38,1,0,0,0,348,349,5,102,0,0,349,350,5,97,0,0,
  	350,351,5,108,0,0,351,352,5,115,0,0,352,353,5,101,0,0,353,40,1,0,0,0,
  	354,355,3,191,95,0,355,356,3,203,101,0,356,357,3,209,104,0,357,358,3,
  	181,90,0,358,359,3,219,109,0,359,42,1,0,0,0,360,361,3,193,96,0,361,362,
  	3,215,107,0,362,363,3,209,104,0,363,364,3,221,110,0,364,365,3,211,105,
  	0,365,44,1,0,0,0,366,367,3,203,101,0,367,368,3,181,90,0,368,369,3,183,
  	91,0,369,370,3,189,94,0,370,371,3,203,101,0,371,372,3,217,108,0,372,46,
  	1,0,0,0,373,374,3,203,101,0,374,375,3,181,90,0,375,376,3,183,91,0,376,
  	377,3,189,94,0,377,378,3,203,101,0,378,48,1,0,0,0,379,380,3,203,101,0,
  	380,381,3,197,98,0,381,382,3,205,102,0,382,383,3,197,98,0,383,384,3,219,
  	109,0,384,50,1,0,0,0,385,386,3,205,102,0,386,387,3,181,90,0,387,388,3,
  	207,103,0,388,389,3,195,97,0,389,390,3,181,90,0,390,391,3,219,109,0,391,
  	392,3,219,109,0,392,393,3,181,90,0,393,394,3,207,103,0,394,52,1,0,0,0,
  	395,396,3,205,102,0,396,397,3,181,90,0,397,398,3,219,109,0,398,399,3,
  	185,92,0,399,400,3,195,97,0,400,54,1,0,0,0,401,402,3,205,102,0,402,403,
  	3,181,90,0,403,404,3,227,113,0,404,56,1,0,0,0,405,406,3,205,102,0,406,
  	407,3,197,98,0,407,408,3,207,103,0,408,58,1,0,0,0,409,410,3,209,104,0,
  	410,411,3,211,105,0,411,412,3,219,109,0,412,413,3,197,98,0,413,414,3,
  	209,104,0,414,415,3,207,103,0,415,416,3,181,90,0,416,417,3,203,101,0,
  	417,60,1,0,0,0,418,419,3,209,104,0,419,420,3,215,107,0,420,421,3,187,
  	93,0,421,422,3,189,94,0,422,423,3,215,107,0,423,62,1,0,0,0,424,425,3,
  	209,104,0,425,426,3,215,107,0,426,64,1,0,0,0,427,428,3,209,104,0,428,
  	429,3,221,110,0,429,430,3,219,109,0,430,431,3,193,96,0,431,432,3,209,
  	104,0,432,433,3,197,98,0,433,434,3,207,103,0,434,435,3,193,96,0,435,66,
  	1,0,0,0,436,437,3,211,105,0,437,438,3,215,107,0,438,439,3,209,104,0,439,
  	440,3,199,99,0,440,441,3,189,94,0,441,442,3,185,92,0,442,443,3,219,109,
  	0,443,444,5,95,0,0,444,445,3,217,108,0,445,446,3,197,98,0,446,447,3,205,
  	102,0,447,448,3,197,98,0,448,449,3,203,101,0,449,450,3,181,90,0,450,451,
  	3,215,107,0,451,452,3,197,98,0,452,453,3,219,109,0,453,454,3,229,114,
  	0,454,68,1,0,0,0,455,456,3,211,105,0,456,457,3,215,107,0,457,458,3,209,
  	104,0,458,459,3,211,105,0,459,460,3,189,94,0,460,461,3,215,107,0,461,
  	462,3,219,109,0,462,463,3,197,98,0,463,464,3,189,94,0,464,465,3,217,108,
  	0,465,70,1,0,0,0,466,467,3,211,105,0,467,468,3,215,107,0,468,469,3,209,
  	104,0,469,470,3,211,105,0,470,471,3,189,94,0,471,472,3,215,107,0,472,
  	473,3,219,109,0,473,474,3,229,114,0,474,72,1,0,0,0,475,476,3,207,103,
  	0,476,477,3,209,104,0,477,478,3,219,109,0,478,74,1,0,0,0,479,480,3,207,
  	103,0,480,481,3,221,110,0,481,482,3,203,101,0,482,483,3,203,101,0,483,
  	76,1,0,0,0,484,485,3,217,108,0,485,486,3,195,97,0,486,487,3,209,104,0,
  	487,488,3,215,107,0,488,489,3,219,109,0,489,490,3,189,94,0,490,491,3,
  	217,108,0,491,492,3,219,109,0,492,78,1,0,0,0,493,494,3,217,108,0,494,
  	495,3,197,98,0,495,496,3,205,102,0,496,497,3,211,105,0,497,498,3,203,
  	101,0,498,499,3,189,94,0,499,80,1,0,0,0,500,501,3,215,107,0,501,502,3,
  	189,94,0,502,503,3,219,109,0,503,504,3,221,110,0,504,505,3,215,107,0,
  	505,506,3,207,103,0,506,82,1,0,0,0,507,508,3,217,108,0,508,509,3,189,
  	94,0,509,510,3,219,109,0,510,84,1,0,0,0,511,512,3,217,108,0,512,513,3,
  	197,98,0,513,514,3,205,102,0,514,515,3,197,98,0,515,516,3,203,101,0,516,
  	517,3,181,90,0,517,518,3,215,107,0,518,519,3,197,98,0,519,520,3,219,109,
  	0,520,521,3,229,114,0,521,522,5,95,0,0,522,523,3,217,108,0,523,524,3,
  	189,94,0,524,525,3,181,90,0,525,526,3,215,107,0,526,527,3,185,92,0,527,
  	528,3,195,97,0,528,86,1,0,0,0,529,530,3,217,108,0,530,531,3,221,110,0,
  	531,532,3,205,102,0,532,88,1,0,0,0,533,534,3,217,108,0,534,535,3,219,
  	109,0,535,536,3,215,107,0,536,537,3,197,98,0,537,538,3,207,103,0,538,
  	539,3,193,96,0,539,90,1,0,0,0,540,541,5,116,0,0,541,542,5,114,0,0,542,
  	543,5,117,0,0,543,544,5,101,0,0,544,92,1,0,0,0,545,546,3,219,109,0,546,
  	547,3,215,107,0,547,548,3,181,90,0,548,549,3,197,98,0,549,550,3,203,101,
  	0,550,551,3,217,108,0,551,94,1,0,0,0,552,553,3,225,112,0,553,554,3,181,
  	90,0,554,555,3,203,101,0,555,556,3,201,100,0,556,557,3,217,108,0,557,
  	96,1,0,0,0,558,559,3,225,112,0,559,560,3,195,97,0,560,561,3,189,94,0,
  	561,562,3,215,107,0,562,563,3,189,94,0,563,98,1,0,0,0,564,565,5,58,0,
  	0,565,566,5,116,0,0,566,567,5,114,0,0,567,568,5,117,0,0,568,569,5,101,
  	0,0,569,100,1,0,0,0,570,571,5,58,0,0,571,572,5,102,0,0,572,573,5,97,0,
  	0,573,574,5,108,0,0,574,575,5,115,0,0,575,576,5,101,0,0,576,102,1,0,0,
  	0,577,578,5,95,0,0,578,579,5,97,0,0,579,580,1,0,0,0,580,584,7,0,0,0,581,
  	583,7,1,0,0,582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,
  	0,0,0,585,104,1,0,0,0,586,584,1,0,0,0,587,588,5,95,0,0,588,589,5,101,
  	0,0,589,590,1,0,0,0,590,594,7,0,0,0,591,593,7,1,0,0,592,591,1,0,0,0,593,
  	596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,106,1,0,0,0,596,594,1,
  	0,0,0,597,598,5,46,0,0,598,602,7,2,0,0,599,601,7,3,0,0,600,599,1,0,0,
  	0,601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,108,1,0,0,0,604,
  	602,1,0,0,0,605,606,5,58,0,0,606,610,7,2,0,0,607,609,7,3,0,0,608,607,
  	1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,110,1,0,0,
  	0,612,610,1,0,0,0,613,614,5,58,0,0,614,615,5,63,0,0,615,619,7,2,0,0,616,
  	618,7,3,0,0,617,616,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,
  	0,0,0,620,112,1,0,0,0,621,619,1,0,0,0,622,623,5,63,0,0,623,627,7,2,0,
  	0,624,626,7,3,0,0,625,624,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,
  	628,1,0,0,0,628,114,1,0,0,0,629,627,1,0,0,0,630,636,5,34,0,0,631,635,
  	8,4,0,0,632,633,5,92,0,0,633,635,5,34,0,0,634,631,1,0,0,0,634,632,1,0,
  	0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,
  	636,1,0,0,0,639,640,5,34,0,0,640,116,1,0,0,0,641,643,3,177,88,0,642,641,
  	1,0,0,0,643,644,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,118,1,0,0,
  	0,646,648,3,177,88,0,647,646,1,0,0,0,648,649,1,0,0,0,649,647,1,0,0,0,
  	649,650,1,0,0,0,650,651,1,0,0,0,651,655,5,46,0,0,652,654,3,177,88,0,653,
  	652,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,665,1,
  	0,0,0,657,655,1,0,0,0,658,660,5,46,0,0,659,661,3,177,88,0,660,659,1,0,
  	0,0,661,662,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,665,1,0,0,0,664,
  	647,1,0,0,0,664,658,1,0,0,0,665,120,1,0,0,0,666,668,3,177,88,0,667,666,
  	1,0,0,0,668,669,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,
  	0,671,675,5,46,0,0,672,674,3,177,88,0,673,672,1,0,0,0,674,677,1,0,0,0,
  	675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,675,1,0,0,0,678,679,
  	3,179,89,0,679,696,1,0,0,0,680,682,5,46,0,0,681,683,3,177,88,0,682,681,
  	1,0,0,0,683,684,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,
  	0,686,687,3,179,89,0,687,696,1,0,0,0,688,690,3,177,88,0,689,688,1,0,0,
  	0,690,691,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,
  	694,3,179,89,0,694,696,1,0,0,0,695,667,1,0,0,0,695,680,1,0,0,0,695,689,
  	1,0,0,0,696,122,1,0,0,0,697,701,7,2,0,0,698,700,7,3,0,0,699,698,1,0,0,
  	0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,124,1,0,0,0,703,
  	701,1,0,0,0,704,705,5,60,0,0,705,706,5,61,0,0,706,126,1,0,0,0,707,708,
  	5,62,0,0,708,709,5,61,0,0,709,128,1,0,0,0,710,711,5,61,0,0,711,712,5,
  	61,0,0,712,130,1,0,0,0,713,714,5,33,0,0,714,715,5,61,0,0,715,132,1,0,
  	0,0,716,717,5,60,0,0,717,134,1,0,0,0,718,719,5,62,0,0,719,136,1,0,0,0,
  	720,721,5,61,0,0,721,138,1,0,0,0,722,723,5,47,0,0,723,140,1,0,0,0,724,
  	725,5,124,0,0,725,142,1,0,0,0,726,727,5,94,0,0,727,144,1,0,0,0,728,729,
  	5,42,0,0,729,146,1,0,0,0,730,731,5,37,0,0,731,148,1,0,0,0,732,733,5,63,
  	0,0,733,150,1,0,0,0,734,735,5,43,0,0,735,152,1,0,0,0,736,737,5,45,0,0,
  	737,154,1,0,0,0,738,739,5,40,0,0,739,156,1,0,0,0,740,741,5,41,0,0,741,
  	158,1,0,0,0,742,743,5,123,0,0,743,160,1,0,0,0,744,745,5,125,0,0,745,162,
  	1,0,0,0,746,747,5,91,0,0,747,164,1,0,0,0,748,749,5,93,0,0,749,166,1,0,
  	0,0,750,751,5,44,0,0,751,168,1,0,0,0,752,753,5,58,0,0,753,170,1,0,0,0,
  	754,756,7,5,0,0,755,754,1,0,0,0,756,757,1,0,0,0,757,755,1,0,0,0,757,758,
  	1,0,0,0,758,759,1,0,0,0,759,760,6,85,0,0,760,172,1,0,0,0,761,762,5,47,
  	0,0,762,763,5,47,0,0,763,767,1,0,0,0,764,766,8,6,0,0,765,764,1,0,0,0,
  	766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,775,1,0,0,0,769,767,
  	1,0,0,0,770,772,5,13,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,773,1,0,
  	0,0,773,776,5,10,0,0,774,776,5,0,0,1,775,771,1,0,0,0,775,774,1,0,0,0,
  	776,777,1,0,0,0,777,778,6,86,1,0,778,174,1,0,0,0,779,780,9,0,0,0,780,
  	176,1,0,0,0,781,782,7,1,0,0,782,178,1,0,0,0,783,785,7,7,0,0,784,786,7,
  	8,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,789,3,177,88,
  	0,788,787,1,0,0,0,789,790,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,
  	180,1,0,0,0,792,793,7,9,0,0,793,182,1,0,0,0,794,795,7,10,0,0,795,184,
  	1,0,0,0,796,797,7,11,0,0,797,186,1,0,0,0,798,799,7,12,0,0,799,188,1,0,
  	0,0,800,801,7,7,0,0,801,190,1,0,0,0,802,803,7,13,0,0,803,192,1,0,0,0,
  	804,805,7,14,0,0,805,194,1,0,0,0,806,807,7,15,0,0,807,196,1,0,0,0,808,
  	809,7,16,0,0,809,198,1,0,0,0,810,811,7,17,0,0,811,200,1,0,0,0,812,813,
  	7,18,0,0,813,202,1,0,0,0,814,815,7,19,0,0,815,204,1,0,0,0,816,817,7,20,
  	0,0,817,206,1,0,0,0,818,819,7,21,0,0,819,208,1,0,0,0,820,821,7,22,0,0,
  	821,210,1,0,0,0,822,823,7,23,0,0,823,212,1,0,0,0,824,825,7,24,0,0,825,
  	214,1,0,0,0,826,827,7,25,0,0,827,216,1,0,0,0,828,829,7,26,0,0,829,218,
  	1,0,0,0,830,831,7,27,0,0,831,220,1,0,0,0,832,833,7,28,0,0,833,222,1,0,
  	0,0,834,835,7,29,0,0,835,224,1,0,0,0,836,837,7,30,0,0,837,226,1,0,0,0,
  	838,839,7,31,0,0,839,228,1,0,0,0,840,841,7,32,0,0,841,230,1,0,0,0,842,
  	843,7,33,0,0,843,232,1,0,0,0,26,0,584,594,602,610,619,627,634,636,644,
  	649,655,662,664,669,675,684,691,695,701,757,767,771,775,785,790,2,0,2,
  	0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mql_lexerLexerStaticData = staticData.release();
}

}

MQL_Lexer::MQL_Lexer(CharStream *input) : Lexer(input) {
  MQL_Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mql_lexerLexerStaticData->atn, mql_lexerLexerStaticData->decisionToDFA, mql_lexerLexerStaticData->sharedContextCache);
}

MQL_Lexer::~MQL_Lexer() {
  delete _interpreter;
}

std::string MQL_Lexer::getGrammarFileName() const {
  return "MQL_Lexer.g4";
}

const std::vector<std::string>& MQL_Lexer::getRuleNames() const {
  return mql_lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MQL_Lexer::getChannelNames() const {
  return mql_lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MQL_Lexer::getModeNames() const {
  return mql_lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MQL_Lexer::getVocabulary() const {
  return mql_lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MQL_Lexer::getSerializedATN() const {
  return mql_lexerLexerStaticData->serializedATN;
}

const atn::ATN& MQL_Lexer::getATN() const {
  return *mql_lexerLexerStaticData->atn;
}




void MQL_Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mql_lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(mql_lexerLexerOnceFlag, mql_lexerLexerInitialize);
#endif
}

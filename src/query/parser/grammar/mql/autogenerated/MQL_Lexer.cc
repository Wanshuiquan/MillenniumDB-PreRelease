
// Generated from MQL_Lexer.g4 by ANTLR 4.13.2


#include "MQL_Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MQL_LexerStaticData final {
  MQL_LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MQL_LexerStaticData(const MQL_LexerStaticData&) = delete;
  MQL_LexerStaticData(MQL_LexerStaticData&&) = delete;
  MQL_LexerStaticData& operator=(const MQL_LexerStaticData&) = delete;
  MQL_LexerStaticData& operator=(MQL_LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mql_lexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<MQL_LexerStaticData> mql_lexerLexerStaticData = nullptr;

void mql_lexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mql_lexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(mql_lexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MQL_LexerStaticData>(
    std::vector<std::string>{
      "K_ACYCLIC", "K_AND", "K_ANGULAR", "K_ANY", "K_AVG", "K_ALL", "K_ASC", 
      "K_BY", "K_BOOL", "K_COUNT", "K_DESCRIBE", "K_DESC", "K_DISTINCT", 
      "K_EDGE", "K_EUCLIDEAN", "K_INCOMING", "K_INSERT", "K_INTEGER", "K_IS", 
      "K_FALSE", "K_FLOAT", "K_GROUP", "K_LABELS", "K_LABEL", "K_LIMIT", 
      "K_MANHATTAN", "K_MATCH", "K_MAX", "K_MIN", "K_OPTIONAL", "K_ORDER", 
      "K_OR", "K_OUTGOING", "K_PROJECT_SIMILARITY", "K_PROPERTIES", "K_PROPERTY", 
      "K_NOT", "K_NULL", "K_SHORTEST", "K_SIMPLE", "K_RETURN", "K_SET", 
      "K_SIMILARITY_SEARCH", "K_SUM", "K_STRING", "K_TRUE", "K_TRAILS", 
      "K_WALKS", "K_WHERE", "TRUE_PROP", "FALSE_PROP", "ANON_ID", "EDGE_ID", 
      "KEY", "TYPE", "TYPE_VAR", "VARIABLE", "STRING", "UNSIGNED_INTEGER", 
      "UNSIGNED_FLOAT", "NAME", "LEQ", "GEQ", "EQ", "NEQ", "LT", "GT", "SINGLE_EQ", 
      "PATH_SEQUENCE", "PATH_ALTERNATIVE", "PATH_NEGATION", "STAR", "PERCENT", 
      "QUESTION_MARK", "PLUS", "MINUS", "L_PAR", "R_PAR", "LCURLY_BRACKET", 
      "RCURLY_BRACKET", "LSQUARE_BRACKET", "RSQUARE_BRACKET", "COMMA", "COLON", 
      "WHITE_SPACE", "SINGLE_LINE_COMMENT", "UNRECOGNIZED", "DIGIT", "A", 
      "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", 
      "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "'false'", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'true'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'<='", 
      "'>='", "'=='", "'!='", "'<'", "'>'", "'='", "'/'", "'|'", "'^'", 
      "'*'", "'%'", "'\\u003F'", "'+'", "'-'", "'('", "')'", "'{'", "'}'", 
      "'['", "']'", "','", "':'"
    },
    std::vector<std::string>{
      "", "K_ACYCLIC", "K_AND", "K_ANGULAR", "K_ANY", "K_AVG", "K_ALL", 
      "K_ASC", "K_BY", "K_BOOL", "K_COUNT", "K_DESCRIBE", "K_DESC", "K_DISTINCT", 
      "K_EDGE", "K_EUCLIDEAN", "K_INCOMING", "K_INSERT", "K_INTEGER", "K_IS", 
      "K_FALSE", "K_FLOAT", "K_GROUP", "K_LABELS", "K_LABEL", "K_LIMIT", 
      "K_MANHATTAN", "K_MATCH", "K_MAX", "K_MIN", "K_OPTIONAL", "K_ORDER", 
      "K_OR", "K_OUTGOING", "K_PROJECT_SIMILARITY", "K_PROPERTIES", "K_PROPERTY", 
      "K_NOT", "K_NULL", "K_SHORTEST", "K_SIMPLE", "K_RETURN", "K_SET", 
      "K_SIMILARITY_SEARCH", "K_SUM", "K_STRING", "K_TRUE", "K_TRAILS", 
      "K_WALKS", "K_WHERE", "TRUE_PROP", "FALSE_PROP", "ANON_ID", "EDGE_ID", 
      "KEY", "TYPE", "TYPE_VAR", "VARIABLE", "STRING", "UNSIGNED_INTEGER", 
      "UNSIGNED_FLOAT", "NAME", "LEQ", "GEQ", "EQ", "NEQ", "LT", "GT", "SINGLE_EQ", 
      "PATH_SEQUENCE", "PATH_ALTERNATIVE", "PATH_NEGATION", "STAR", "PERCENT", 
      "QUESTION_MARK", "PLUS", "MINUS", "L_PAR", "R_PAR", "LCURLY_BRACKET", 
      "RCURLY_BRACKET", "LSQUARE_BRACKET", "RSQUARE_BRACKET", "COMMA", "COLON", 
      "WHITE_SPACE", "SINGLE_LINE_COMMENT", "UNRECOGNIZED"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,87,791,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
  	4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,
  	1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
  	10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,
  	18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
  	27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
  	40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,
  	42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
  	42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,
  	45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,
  	47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,5,51,579,8,
  	51,10,51,12,51,582,9,51,1,52,1,52,1,52,1,52,1,52,5,52,589,8,52,10,52,
  	12,52,592,9,52,1,53,1,53,1,53,5,53,597,8,53,10,53,12,53,600,9,53,1,54,
  	1,54,1,54,5,54,605,8,54,10,54,12,54,608,9,54,1,55,1,55,1,55,1,55,5,55,
  	614,8,55,10,55,12,55,617,9,55,1,56,1,56,1,56,5,56,622,8,56,10,56,12,56,
  	625,9,56,1,57,1,57,1,57,1,57,5,57,631,8,57,10,57,12,57,634,9,57,1,57,
  	1,57,1,58,4,58,639,8,58,11,58,12,58,640,1,59,4,59,644,8,59,11,59,12,59,
  	645,1,59,1,59,4,59,650,8,59,11,59,12,59,651,1,60,1,60,5,60,656,8,60,10,
  	60,12,60,659,9,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,
  	64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,
  	71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,
  	78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,4,84,712,
  	8,84,11,84,12,84,713,1,84,1,84,1,85,1,85,1,85,1,85,5,85,722,8,85,10,85,
  	12,85,725,9,85,1,85,3,85,728,8,85,1,85,1,85,3,85,732,8,85,1,85,1,85,1,
  	86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,
  	93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,
  	100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,104,1,104,1,105,1,105,
  	1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,1,110,1,111,1,111,
  	1,112,1,112,1,113,1,113,0,0,114,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
  	9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
  	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
  	44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
  	55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,
  	65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,
  	75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,
  	85,171,86,173,87,175,0,177,0,179,0,181,0,183,0,185,0,187,0,189,0,191,
  	0,193,0,195,0,197,0,199,0,201,0,203,0,205,0,207,0,209,0,211,0,213,0,215,
  	0,217,0,219,0,221,0,223,0,225,0,227,0,1,0,33,1,0,49,57,1,0,48,57,2,0,
  	65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,3,0,9,10,13,13,32,
  	32,2,0,10,10,13,13,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,
  	0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,
  	2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,
  	2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,
  	2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,
  	2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,
  	2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,779,0,1,1,0,0,0,
  	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
  	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
  	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
  	1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
  	0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
  	0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
  	1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
  	0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
  	0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
  	1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
  	1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
  	1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
  	1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,
  	1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,
  	1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,
  	1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,
  	1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,1,229,1,0,0,0,3,237,1,0,0,0,5,241,
  	1,0,0,0,7,249,1,0,0,0,9,253,1,0,0,0,11,257,1,0,0,0,13,261,1,0,0,0,15,
  	265,1,0,0,0,17,268,1,0,0,0,19,273,1,0,0,0,21,279,1,0,0,0,23,288,1,0,0,
  	0,25,293,1,0,0,0,27,302,1,0,0,0,29,307,1,0,0,0,31,317,1,0,0,0,33,326,
  	1,0,0,0,35,333,1,0,0,0,37,341,1,0,0,0,39,344,1,0,0,0,41,350,1,0,0,0,43,
  	356,1,0,0,0,45,362,1,0,0,0,47,369,1,0,0,0,49,375,1,0,0,0,51,381,1,0,0,
  	0,53,391,1,0,0,0,55,397,1,0,0,0,57,401,1,0,0,0,59,405,1,0,0,0,61,414,
  	1,0,0,0,63,420,1,0,0,0,65,423,1,0,0,0,67,432,1,0,0,0,69,451,1,0,0,0,71,
  	462,1,0,0,0,73,471,1,0,0,0,75,475,1,0,0,0,77,480,1,0,0,0,79,489,1,0,0,
  	0,81,496,1,0,0,0,83,503,1,0,0,0,85,507,1,0,0,0,87,525,1,0,0,0,89,529,
  	1,0,0,0,91,536,1,0,0,0,93,541,1,0,0,0,95,548,1,0,0,0,97,554,1,0,0,0,99,
  	560,1,0,0,0,101,566,1,0,0,0,103,573,1,0,0,0,105,583,1,0,0,0,107,593,1,
  	0,0,0,109,601,1,0,0,0,111,609,1,0,0,0,113,618,1,0,0,0,115,626,1,0,0,0,
  	117,638,1,0,0,0,119,643,1,0,0,0,121,653,1,0,0,0,123,660,1,0,0,0,125,663,
  	1,0,0,0,127,666,1,0,0,0,129,669,1,0,0,0,131,672,1,0,0,0,133,674,1,0,0,
  	0,135,676,1,0,0,0,137,678,1,0,0,0,139,680,1,0,0,0,141,682,1,0,0,0,143,
  	684,1,0,0,0,145,686,1,0,0,0,147,688,1,0,0,0,149,690,1,0,0,0,151,692,1,
  	0,0,0,153,694,1,0,0,0,155,696,1,0,0,0,157,698,1,0,0,0,159,700,1,0,0,0,
  	161,702,1,0,0,0,163,704,1,0,0,0,165,706,1,0,0,0,167,708,1,0,0,0,169,711,
  	1,0,0,0,171,717,1,0,0,0,173,735,1,0,0,0,175,737,1,0,0,0,177,739,1,0,0,
  	0,179,741,1,0,0,0,181,743,1,0,0,0,183,745,1,0,0,0,185,747,1,0,0,0,187,
  	749,1,0,0,0,189,751,1,0,0,0,191,753,1,0,0,0,193,755,1,0,0,0,195,757,1,
  	0,0,0,197,759,1,0,0,0,199,761,1,0,0,0,201,763,1,0,0,0,203,765,1,0,0,0,
  	205,767,1,0,0,0,207,769,1,0,0,0,209,771,1,0,0,0,211,773,1,0,0,0,213,775,
  	1,0,0,0,215,777,1,0,0,0,217,779,1,0,0,0,219,781,1,0,0,0,221,783,1,0,0,
  	0,223,785,1,0,0,0,225,787,1,0,0,0,227,789,1,0,0,0,229,230,3,177,88,0,
  	230,231,3,181,90,0,231,232,3,225,112,0,232,233,3,181,90,0,233,234,3,199,
  	99,0,234,235,3,193,96,0,235,236,3,181,90,0,236,2,1,0,0,0,237,238,3,177,
  	88,0,238,239,3,203,101,0,239,240,3,183,91,0,240,4,1,0,0,0,241,242,3,177,
  	88,0,242,243,3,203,101,0,243,244,3,189,94,0,244,245,3,217,108,0,245,246,
  	3,199,99,0,246,247,3,177,88,0,247,248,3,211,105,0,248,6,1,0,0,0,249,250,
  	3,177,88,0,250,251,3,203,101,0,251,252,3,225,112,0,252,8,1,0,0,0,253,
  	254,3,177,88,0,254,255,3,219,109,0,255,256,3,189,94,0,256,10,1,0,0,0,
  	257,258,3,177,88,0,258,259,3,199,99,0,259,260,3,199,99,0,260,12,1,0,0,
  	0,261,262,3,177,88,0,262,263,3,213,106,0,263,264,3,181,90,0,264,14,1,
  	0,0,0,265,266,3,179,89,0,266,267,3,225,112,0,267,16,1,0,0,0,268,269,3,
  	179,89,0,269,270,3,205,102,0,270,271,3,205,102,0,271,272,3,199,99,0,272,
  	18,1,0,0,0,273,274,3,181,90,0,274,275,3,205,102,0,275,276,3,217,108,0,
  	276,277,3,203,101,0,277,278,3,215,107,0,278,20,1,0,0,0,279,280,3,183,
  	91,0,280,281,3,185,92,0,281,282,3,213,106,0,282,283,3,181,90,0,283,284,
  	3,211,105,0,284,285,3,193,96,0,285,286,3,179,89,0,286,287,3,185,92,0,
  	287,22,1,0,0,0,288,289,3,183,91,0,289,290,3,185,92,0,290,291,3,213,106,
  	0,291,292,3,181,90,0,292,24,1,0,0,0,293,294,3,183,91,0,294,295,3,193,
  	96,0,295,296,3,213,106,0,296,297,3,215,107,0,297,298,3,193,96,0,298,299,
  	3,203,101,0,299,300,3,181,90,0,300,301,3,215,107,0,301,26,1,0,0,0,302,
  	303,3,185,92,0,303,304,3,183,91,0,304,305,3,189,94,0,305,306,3,185,92,
  	0,306,28,1,0,0,0,307,308,3,185,92,0,308,309,3,217,108,0,309,310,3,181,
  	90,0,310,311,3,199,99,0,311,312,3,193,96,0,312,313,3,183,91,0,313,314,
  	3,185,92,0,314,315,3,177,88,0,315,316,3,203,101,0,316,30,1,0,0,0,317,
  	318,3,193,96,0,318,319,3,203,101,0,319,320,3,181,90,0,320,321,3,205,102,
  	0,321,322,3,201,100,0,322,323,3,193,96,0,323,324,3,203,101,0,324,325,
  	3,189,94,0,325,32,1,0,0,0,326,327,3,193,96,0,327,328,3,203,101,0,328,
  	329,3,213,106,0,329,330,3,185,92,0,330,331,3,211,105,0,331,332,3,215,
  	107,0,332,34,1,0,0,0,333,334,3,193,96,0,334,335,3,203,101,0,335,336,3,
  	215,107,0,336,337,3,185,92,0,337,338,3,189,94,0,338,339,3,185,92,0,339,
  	340,3,211,105,0,340,36,1,0,0,0,341,342,3,193,96,0,342,343,3,213,106,0,
  	343,38,1,0,0,0,344,345,5,102,0,0,345,346,5,97,0,0,346,347,5,108,0,0,347,
  	348,5,115,0,0,348,349,5,101,0,0,349,40,1,0,0,0,350,351,3,187,93,0,351,
  	352,3,199,99,0,352,353,3,205,102,0,353,354,3,177,88,0,354,355,3,215,107,
  	0,355,42,1,0,0,0,356,357,3,189,94,0,357,358,3,211,105,0,358,359,3,205,
  	102,0,359,360,3,217,108,0,360,361,3,207,103,0,361,44,1,0,0,0,362,363,
  	3,199,99,0,363,364,3,177,88,0,364,365,3,179,89,0,365,366,3,185,92,0,366,
  	367,3,199,99,0,367,368,3,213,106,0,368,46,1,0,0,0,369,370,3,199,99,0,
  	370,371,3,177,88,0,371,372,3,179,89,0,372,373,3,185,92,0,373,374,3,199,
  	99,0,374,48,1,0,0,0,375,376,3,199,99,0,376,377,3,193,96,0,377,378,3,201,
  	100,0,378,379,3,193,96,0,379,380,3,215,107,0,380,50,1,0,0,0,381,382,3,
  	201,100,0,382,383,3,177,88,0,383,384,3,203,101,0,384,385,3,191,95,0,385,
  	386,3,177,88,0,386,387,3,215,107,0,387,388,3,215,107,0,388,389,3,177,
  	88,0,389,390,3,203,101,0,390,52,1,0,0,0,391,392,3,201,100,0,392,393,3,
  	177,88,0,393,394,3,215,107,0,394,395,3,181,90,0,395,396,3,191,95,0,396,
  	54,1,0,0,0,397,398,3,201,100,0,398,399,3,177,88,0,399,400,3,223,111,0,
  	400,56,1,0,0,0,401,402,3,201,100,0,402,403,3,193,96,0,403,404,3,203,101,
  	0,404,58,1,0,0,0,405,406,3,205,102,0,406,407,3,207,103,0,407,408,3,215,
  	107,0,408,409,3,193,96,0,409,410,3,205,102,0,410,411,3,203,101,0,411,
  	412,3,177,88,0,412,413,3,199,99,0,413,60,1,0,0,0,414,415,3,205,102,0,
  	415,416,3,211,105,0,416,417,3,183,91,0,417,418,3,185,92,0,418,419,3,211,
  	105,0,419,62,1,0,0,0,420,421,3,205,102,0,421,422,3,211,105,0,422,64,1,
  	0,0,0,423,424,3,205,102,0,424,425,3,217,108,0,425,426,3,215,107,0,426,
  	427,3,189,94,0,427,428,3,205,102,0,428,429,3,193,96,0,429,430,3,203,101,
  	0,430,431,3,189,94,0,431,66,1,0,0,0,432,433,3,207,103,0,433,434,3,211,
  	105,0,434,435,3,205,102,0,435,436,3,195,97,0,436,437,3,185,92,0,437,438,
  	3,181,90,0,438,439,3,215,107,0,439,440,5,95,0,0,440,441,3,213,106,0,441,
  	442,3,193,96,0,442,443,3,201,100,0,443,444,3,193,96,0,444,445,3,199,99,
  	0,445,446,3,177,88,0,446,447,3,211,105,0,447,448,3,193,96,0,448,449,3,
  	215,107,0,449,450,3,225,112,0,450,68,1,0,0,0,451,452,3,207,103,0,452,
  	453,3,211,105,0,453,454,3,205,102,0,454,455,3,207,103,0,455,456,3,185,
  	92,0,456,457,3,211,105,0,457,458,3,215,107,0,458,459,3,193,96,0,459,460,
  	3,185,92,0,460,461,3,213,106,0,461,70,1,0,0,0,462,463,3,207,103,0,463,
  	464,3,211,105,0,464,465,3,205,102,0,465,466,3,207,103,0,466,467,3,185,
  	92,0,467,468,3,211,105,0,468,469,3,215,107,0,469,470,3,225,112,0,470,
  	72,1,0,0,0,471,472,3,203,101,0,472,473,3,205,102,0,473,474,3,215,107,
  	0,474,74,1,0,0,0,475,476,3,203,101,0,476,477,3,217,108,0,477,478,3,199,
  	99,0,478,479,3,199,99,0,479,76,1,0,0,0,480,481,3,213,106,0,481,482,3,
  	191,95,0,482,483,3,205,102,0,483,484,3,211,105,0,484,485,3,215,107,0,
  	485,486,3,185,92,0,486,487,3,213,106,0,487,488,3,215,107,0,488,78,1,0,
  	0,0,489,490,3,213,106,0,490,491,3,193,96,0,491,492,3,201,100,0,492,493,
  	3,207,103,0,493,494,3,199,99,0,494,495,3,185,92,0,495,80,1,0,0,0,496,
  	497,3,211,105,0,497,498,3,185,92,0,498,499,3,215,107,0,499,500,3,217,
  	108,0,500,501,3,211,105,0,501,502,3,203,101,0,502,82,1,0,0,0,503,504,
  	3,213,106,0,504,505,3,185,92,0,505,506,3,215,107,0,506,84,1,0,0,0,507,
  	508,3,213,106,0,508,509,3,193,96,0,509,510,3,201,100,0,510,511,3,193,
  	96,0,511,512,3,199,99,0,512,513,3,177,88,0,513,514,3,211,105,0,514,515,
  	3,193,96,0,515,516,3,215,107,0,516,517,3,225,112,0,517,518,5,95,0,0,518,
  	519,3,213,106,0,519,520,3,185,92,0,520,521,3,177,88,0,521,522,3,211,105,
  	0,522,523,3,181,90,0,523,524,3,191,95,0,524,86,1,0,0,0,525,526,3,213,
  	106,0,526,527,3,217,108,0,527,528,3,201,100,0,528,88,1,0,0,0,529,530,
  	3,213,106,0,530,531,3,215,107,0,531,532,3,211,105,0,532,533,3,193,96,
  	0,533,534,3,203,101,0,534,535,3,189,94,0,535,90,1,0,0,0,536,537,5,116,
  	0,0,537,538,5,114,0,0,538,539,5,117,0,0,539,540,5,101,0,0,540,92,1,0,
  	0,0,541,542,3,215,107,0,542,543,3,211,105,0,543,544,3,177,88,0,544,545,
  	3,193,96,0,545,546,3,199,99,0,546,547,3,213,106,0,547,94,1,0,0,0,548,
  	549,3,221,110,0,549,550,3,177,88,0,550,551,3,199,99,0,551,552,3,197,98,
  	0,552,553,3,213,106,0,553,96,1,0,0,0,554,555,3,221,110,0,555,556,3,191,
  	95,0,556,557,3,185,92,0,557,558,3,211,105,0,558,559,3,185,92,0,559,98,
  	1,0,0,0,560,561,5,58,0,0,561,562,5,116,0,0,562,563,5,114,0,0,563,564,
  	5,117,0,0,564,565,5,101,0,0,565,100,1,0,0,0,566,567,5,58,0,0,567,568,
  	5,102,0,0,568,569,5,97,0,0,569,570,5,108,0,0,570,571,5,115,0,0,571,572,
  	5,101,0,0,572,102,1,0,0,0,573,574,5,95,0,0,574,575,5,97,0,0,575,576,1,
  	0,0,0,576,580,7,0,0,0,577,579,7,1,0,0,578,577,1,0,0,0,579,582,1,0,0,0,
  	580,578,1,0,0,0,580,581,1,0,0,0,581,104,1,0,0,0,582,580,1,0,0,0,583,584,
  	5,95,0,0,584,585,5,101,0,0,585,586,1,0,0,0,586,590,7,0,0,0,587,589,7,
  	1,0,0,588,587,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,
  	591,106,1,0,0,0,592,590,1,0,0,0,593,594,5,46,0,0,594,598,7,2,0,0,595,
  	597,7,3,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,
  	0,0,0,599,108,1,0,0,0,600,598,1,0,0,0,601,602,5,58,0,0,602,606,7,2,0,
  	0,603,605,7,3,0,0,604,603,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,
  	607,1,0,0,0,607,110,1,0,0,0,608,606,1,0,0,0,609,610,5,58,0,0,610,611,
  	5,63,0,0,611,615,7,2,0,0,612,614,7,3,0,0,613,612,1,0,0,0,614,617,1,0,
  	0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,112,1,0,0,0,617,615,1,0,0,0,618,
  	619,5,63,0,0,619,623,7,2,0,0,620,622,7,3,0,0,621,620,1,0,0,0,622,625,
  	1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,114,1,0,0,0,625,623,1,0,0,
  	0,626,632,5,34,0,0,627,631,8,4,0,0,628,629,5,92,0,0,629,631,5,34,0,0,
  	630,627,1,0,0,0,630,628,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,
  	1,0,0,0,633,635,1,0,0,0,634,632,1,0,0,0,635,636,5,34,0,0,636,116,1,0,
  	0,0,637,639,3,175,87,0,638,637,1,0,0,0,639,640,1,0,0,0,640,638,1,0,0,
  	0,640,641,1,0,0,0,641,118,1,0,0,0,642,644,3,175,87,0,643,642,1,0,0,0,
  	644,645,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,649,
  	5,46,0,0,648,650,3,175,87,0,649,648,1,0,0,0,650,651,1,0,0,0,651,649,1,
  	0,0,0,651,652,1,0,0,0,652,120,1,0,0,0,653,657,7,2,0,0,654,656,7,3,0,0,
  	655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,122,
  	1,0,0,0,659,657,1,0,0,0,660,661,5,60,0,0,661,662,5,61,0,0,662,124,1,0,
  	0,0,663,664,5,62,0,0,664,665,5,61,0,0,665,126,1,0,0,0,666,667,5,61,0,
  	0,667,668,5,61,0,0,668,128,1,0,0,0,669,670,5,33,0,0,670,671,5,61,0,0,
  	671,130,1,0,0,0,672,673,5,60,0,0,673,132,1,0,0,0,674,675,5,62,0,0,675,
  	134,1,0,0,0,676,677,5,61,0,0,677,136,1,0,0,0,678,679,5,47,0,0,679,138,
  	1,0,0,0,680,681,5,124,0,0,681,140,1,0,0,0,682,683,5,94,0,0,683,142,1,
  	0,0,0,684,685,5,42,0,0,685,144,1,0,0,0,686,687,5,37,0,0,687,146,1,0,0,
  	0,688,689,5,63,0,0,689,148,1,0,0,0,690,691,5,43,0,0,691,150,1,0,0,0,692,
  	693,5,45,0,0,693,152,1,0,0,0,694,695,5,40,0,0,695,154,1,0,0,0,696,697,
  	5,41,0,0,697,156,1,0,0,0,698,699,5,123,0,0,699,158,1,0,0,0,700,701,5,
  	125,0,0,701,160,1,0,0,0,702,703,5,91,0,0,703,162,1,0,0,0,704,705,5,93,
  	0,0,705,164,1,0,0,0,706,707,5,44,0,0,707,166,1,0,0,0,708,709,5,58,0,0,
  	709,168,1,0,0,0,710,712,7,5,0,0,711,710,1,0,0,0,712,713,1,0,0,0,713,711,
  	1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,6,84,0,0,716,170,1,0,
  	0,0,717,718,5,47,0,0,718,719,5,47,0,0,719,723,1,0,0,0,720,722,8,6,0,0,
  	721,720,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,731,
  	1,0,0,0,725,723,1,0,0,0,726,728,5,13,0,0,727,726,1,0,0,0,727,728,1,0,
  	0,0,728,729,1,0,0,0,729,732,5,10,0,0,730,732,5,0,0,1,731,727,1,0,0,0,
  	731,730,1,0,0,0,732,733,1,0,0,0,733,734,6,85,1,0,734,172,1,0,0,0,735,
  	736,9,0,0,0,736,174,1,0,0,0,737,738,7,1,0,0,738,176,1,0,0,0,739,740,7,
  	7,0,0,740,178,1,0,0,0,741,742,7,8,0,0,742,180,1,0,0,0,743,744,7,9,0,0,
  	744,182,1,0,0,0,745,746,7,10,0,0,746,184,1,0,0,0,747,748,7,11,0,0,748,
  	186,1,0,0,0,749,750,7,12,0,0,750,188,1,0,0,0,751,752,7,13,0,0,752,190,
  	1,0,0,0,753,754,7,14,0,0,754,192,1,0,0,0,755,756,7,15,0,0,756,194,1,0,
  	0,0,757,758,7,16,0,0,758,196,1,0,0,0,759,760,7,17,0,0,760,198,1,0,0,0,
  	761,762,7,18,0,0,762,200,1,0,0,0,763,764,7,19,0,0,764,202,1,0,0,0,765,
  	766,7,20,0,0,766,204,1,0,0,0,767,768,7,21,0,0,768,206,1,0,0,0,769,770,
  	7,22,0,0,770,208,1,0,0,0,771,772,7,23,0,0,772,210,1,0,0,0,773,774,7,24,
  	0,0,774,212,1,0,0,0,775,776,7,25,0,0,776,214,1,0,0,0,777,778,7,26,0,0,
  	778,216,1,0,0,0,779,780,7,27,0,0,780,218,1,0,0,0,781,782,7,28,0,0,782,
  	220,1,0,0,0,783,784,7,29,0,0,784,222,1,0,0,0,785,786,7,30,0,0,786,224,
  	1,0,0,0,787,788,7,31,0,0,788,226,1,0,0,0,789,790,7,32,0,0,790,228,1,0,
  	0,0,17,0,580,590,598,606,615,623,630,632,640,645,651,657,713,723,727,
  	731,2,0,2,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mql_lexerLexerStaticData = std::move(staticData);
}

}

MQL_Lexer::MQL_Lexer(CharStream *input) : Lexer(input) {
  MQL_Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *mql_lexerLexerStaticData->atn, mql_lexerLexerStaticData->decisionToDFA, mql_lexerLexerStaticData->sharedContextCache);
}

MQL_Lexer::~MQL_Lexer() {
  delete _interpreter;
}

std::string MQL_Lexer::getGrammarFileName() const {
  return "MQL_Lexer.g4";
}

const std::vector<std::string>& MQL_Lexer::getRuleNames() const {
  return mql_lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& MQL_Lexer::getChannelNames() const {
  return mql_lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& MQL_Lexer::getModeNames() const {
  return mql_lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& MQL_Lexer::getVocabulary() const {
  return mql_lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MQL_Lexer::getSerializedATN() const {
  return mql_lexerLexerStaticData->serializedATN;
}

const atn::ATN& MQL_Lexer::getATN() const {
  return *mql_lexerLexerStaticData->atn;
}




void MQL_Lexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mql_lexerLexerInitialize();
#else
  ::antlr4::internal::call_once(mql_lexerLexerOnceFlag, mql_lexerLexerInitialize);
#endif
}
